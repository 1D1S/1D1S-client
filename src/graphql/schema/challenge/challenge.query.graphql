input ChallengeFilterInput {
  keyword: String
  job: JobType
  status: ChallengeStatus
  ageGroup: AgeGroup
  duration: DurationRange
}

input DurationRange {
  minDays: Int
  maxDays: Int
}

type ChallengeConnection {
  edges: [ChallengeEdge]
  pageInfo: PageInfo!
}

type ChallengeEdge {
  node: Challenge
  cursor: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type Query {
  randomChallenges(first: Int = 10): [Challenge]

  challengesList(filter: ChallengeFilterInput, first: Int = 10, after: String): ChallengeConnection

  myChallenges: [Challenge]

  challengeDetail(id: ID!): Challenge
}
